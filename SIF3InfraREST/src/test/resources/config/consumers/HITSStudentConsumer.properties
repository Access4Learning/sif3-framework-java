#--------------------------------------------------------------------------------------#
#-- Properties relating to this Adapter: These are typical properties for a Consumer --#
#--------------------------------------------------------------------------------------#

#
# General information about this adapter
#

# Valid values for adapter.type = consumer|provider
adapter.type=consumer
adapter.id=HITS Student Consumer

# Valid values for adapter.use.https = true|false
adapter.use.https=false

# Turn on (true) or off (false) ACL checks on client. Default = true
adapter.checkACL=true

# External security service shall be used if Bearer Token is used.
#adapter.security.service=sif3.infra.test.common.security.DummySecurityService

# Demo of Hibernate Properties through 'injection'.
#adapter.hbr.propertyClass=systemic.sif3.demo.hibernate.DemoProperties

# Values to be used in the generation of accessToken in external security service. All values with the property 
# name starting in 'security.service.property.<...> will be passed to the 'otherInfo' property of the 
# TokenCoreInfo object. See Developer's Guide for more details.
#security.service.property.prop1=value1
#security.service.property.prop2=value2

# Indicate that this consumer sets the id/refIds and requests the provider to use them rather than assigning them
adapter.mustUseAdvisoryIDs=true

# Indicates if the environment shall be deleted if the adapter shuts down (true): USE WITH CARE! If environment is removed, all
# associated data is lost (queues, messages in queues, delayed responses etc). Should only be TRUE in direct environments without
# events and delayed I/O. 
adapter.deleteEnvironment.onShutdown=false

# Optional generator ID. Can be used as an identifier of the consumer. This value is provided as a HTTP header field
# to the object provider.
adapter.generator.id=school:123

# Indicate if this adapter is capable and should use compression for the payloads (true). If this property is set to true
# then the all calls will compress (gzip) each payload first before it is sent to the provider. It will also indicate to
# the provider that it can accepts compressed payloads in the response. If not set then 'false' is assumed (don't use
# compression).
adapter.compression.enabled=false

# If this property is set to true then no certificate checks are performed. SHOULD NOT BE USED in PROD or TEST environments.
# Its intend is to allow a quick and 'dirty' https connection with self-signed certificates where the certificate shall not be
# validated. Default: false. 
adapter.noCertificateCheck=false

#
# Properties specific to an environment
#

#---------------------------------------#
# Local (Direct Environment) Properties
#---------------------------------------#

#
# Indicate if the environment consumer supports events. Some DIRECT environments won't support it. BROKERED environments
# should. Valid values are true and false. The default is false.
#
env.events.supported=false

env.xml.file.name=HITS.xml
env.application.key=9b19d71b03f84f16aa71f04034c1f714
#env.application.key=BearerTest

# This allows to set/override the userToken and/or instanceId element in the environment XML. This can be used if 
# multiple instances of this adapter shall be run in the same environment configuration. In such case each instance 
# can have a different userToken to distinguish the instances. If it is empty then this property won't be used and 
# the value in the environment XML template is used.
env.userToken=9b19d71b03f84f16aa71f04034c1f714
env.instanceID=

env.pwd=9b19d71b03f84f16aa71f04034c1f714

# mediaType can be XML or JSON (case in-sensitive). Currently only XML is supported by Framework
env.mediaType=XML

# This property is used to set the real encoding used with the media type. The charset encoding value, if set, will be added
# to the media type of the accept and content-type http headers (i.e. application/xml; charset=UTF-8). If it is not set
# then no charset encoding will be added to the media type of the corresponding http headers.
env.mediaType.charset=UTF-8

# authentication.method can be: Basic, SIF_HMACSHA256 or Bearer (case sensitive!!!)
env.authentication.method=Basic
#env.authentication.method=Bearer

# Eclipse built in Tomcat URIs
env.baseURI=http://hits.nsip.edu.au/SIF3InfraREST/hits/environments/environment
#env.baseURI=https://localhost:9443/SIF3InfraREST/sif3/environments/environment

# External Tomcat URIs
#env.baseURI=https://localhost:8443/SIF3InfraREST/sif3/environments/environment

#---------------------------------------------------------#
# Framework Specific Feature: 
# Connect to existing environment rather than create one.
# If this section doesn't exist we assume create one.
#---------------------------------------------------------#

# This property indicates if there is no existing environment in local session store then try to use an
# existing from Environment Provider rather than create a new one with the environment provider. Default is false.
env.use.existing=false

# The session token to use with a pre-existing environment
env.existing.sessionToken=107c2bac-172f-4699-956c-ebfcaff901c2

# The full URI of the pre-existing environment.
env.existing.environmentURI=http://hits.nsip.edu.au/SIF3InfraREST/hits/environments/d9b37329-54df-4e2a-8964-b8b282fb08c4

#
# This property indicates if a 'conflict' or HTTP Status of 409 for a create environment shall be a treated as an error (true) or if it shall 
# be considered a valid state (false). If it is considered a valid state then a payload with an environment XML/JSON would be expected if a
# HTTP Status of 409 is returned. The default is true (treat as error). 
#
env.create.conflictIsError=false


#---------------------------------#
# Event related properties
#---------------------------------#
# If the environment supports events then a consumer can subscribe to them. This section is to configure some 
# behaviour on how to subscribe to events. SIF3 offers many options in this area. They all relate to how queues
# are created and events are directed to queues. See Developer's Guide for more details on the properties below.

# Indicate if event subscription is enabled. Even if an environment supports events, this consumer might not be
# interested in any events. Default is false (don't subscribe to events)
events.enabled=false

#
# SIF3 allow many ways on how to create queues and direct events to them. This framework only supports a set of the
# most common strategies. Currently only 'ADAPTER_LEVEL' is implemented which mean a single queue for this consumer
# is created. Future expansions can be 'ZONE_LEVEL' (One queue per zone), SERVICE_LEVEL (one queue per service in each
# zone) etc. Default is ADAPTER_LEVEL
events.queue.strategy=ADAPTER_LEVEL

#
# This property is used give the queues a certain name. This might be the actual queue name if the strategy is 
# ADAPTER_LEVEL. It might be the queue's prefix if any other queue strategy is used where multiple queues are 
# configured. If not provided the name is assumed to be the same as the adapter.id property with all white spaces 
# removed and the prefix of 'EVENT_'.
events.queue.name=StudentConsumer

#
# There are two ways how a consumer can receive messages from a queue. IMMEDIATE or LONG. Refer to SIF3
# specification for details on the two options. Default is IMMEDIATE.
events.queue.type=IMMEDIATE

#
# Many concurrent subscriptions are allowed on each queue. This property indicates the number of subscriptions per
# queue. The default is 1. Care must be taken with other numbers as it could mean that events are processed out of
# order! The environment provider might override that value with a lesser value.
events.queue.subscribers=3

#
# Frequency with which the queues are being polled to check if there are messages available. This value is in seconds
# and might be overwritten by the environment provider to a larger value. Default is 60 seconds (once a minute).
events.polling.frequency=30

#
# Number of seconds the connections shall remain open for LONG_POLLING queues before it is closed. See SIF3 Spec
# for more details. Default is 120 seconds (2minutes).
events.longPolling.timeout=60

#
# When a consumer is shut down then events will be queued on the broker. This is generally the desired behaviour.
# There might be situations where a shutdown of the consumer also means no events shall be queued during the off-line
# time. To enable this the subscriptions to events must be removed from the event queue. This property indicates if
# subscriptions shall be removed when the consumer shuts down. Default is false => Don't remove subscriptions.
events.subscriptions.removeOnShutdown=false


#-------------------------------------#
# DELAYED Response related properties
#-------------------------------------#
# If the environment supports delayed responses then a consumer can subscribe to them. This section is to configure some 
# behaviour on how to subscribe to delayed responses. SIF3 offers many options in this area. They all relate to how queues
# are created and responses are directed to queues. See Developer's Guide for more details on the properties below.

# Indicate if delayed responses are enabled. Even if an environment supports delayed responses, this consumer might not be
# interested in that functionality. Default is false (don't enable delayed responses)
delayed.enabled=false

#
# SIF3 allow many ways on how to create queues and direct responses to them. This framework only supports a set of the
# most common strategies. Currently only 'ADAPTER_LEVEL' is implemented which mean a single queue for this consumer
# is created. Future expansions can be 'ZONE_LEVEL' (One queue per zone), SERVICE_LEVEL (one queue per service in each
# zone) etc. Default is ADAPTER_LEVEL
delayed.queue.strategy=ADAPTER_LEVEL

#
# This property is used give the queues a certain name. This might be the actual queue name if the strategy is 
# ADAPTER_LEVEL. It might be the queue's prefix if any other queue strategy is used where multiple queues are 
# configured. If not provided the name is assumed to be the same as the adapter.id property with all white spaces 
# removed and the prefix of 'DELAYED_'.
delayed.queue.name=Delayed_StudentConsumer

#
# There are two ways how a consumer can receive messages from a queue. IMMEDIATE or LONG. Refer to SIF3
# specification for details on the two options. Default is IMMEDIATE.
delayed.queue.type=IMMEDIATE

#
# Many concurrent subscriptions are allowed on each queue. This property indicates the number of subscriptions per
# queue. The default is 1. Care must be taken with other numbers as it could mean that responses are processed out of
# order! The environment provider might override that value with a lesser value.
delayed.queue.subscribers=2

#
# Frequency with which the queues are being polled to check if there are messages available. This value is in seconds
# and might be overwritten by the environment provider to a larger value. Default is 60 seconds (once a minute).
delayed.polling.frequency=120

#
# Number of seconds the connections shall remain open for LONG_POLLING queues before it is closed. See SIF3 Spec
# for more details. Default is 120 seconds (2minutes).
delayed.longPolling.timeout=30

#
# When a consumer is shut down then delayed responses will be queued on the broker. This is generally the desired behaviour.
# There might be situations where a shutdown of the consumer also means no responses shall be queued during the off-line
# time. To enable this the subscriptions to delayed responses must be removed from the response queue. This property indicates if
# subscriptions shall be removed when the consumer shuts down. Default is false => Don't remove subscriptions.
delayed.subscriptions.removeOnShutdown=false

#-------------------------------------#
#-- Consumer Assembly Setup Section --#
#-------------------------------------#
#The Base Package where all Consumer Classes can be found
consumer.basePackageName=systemic.sif3.demo.rest.consumer

#Name of all Consumer Classes that make up this Consumer. This is a comma separated list
#consumer.classes=StudentPersonalConsumer,SchoolInfoConsumer
consumer.classes=StudentPersonalConsumer
#consumer.classes=CSVStudentConsumer
#consumer.classes=StudentPersonalConsumer, StudentDailyAttendanceConsumer

# Each consumer in the list above is started in their own thread. These threads are started with a little delay between them.
# The default is 10 seconds. The property below allows to override that value. The delay is in seconds.
consumer.startup.delay=5

# The number of threads processing messages (events) locally. This is the number of threads for each object type that is processed locally.
# If this value is not set then 1 is assumed (default). 
consumer.local.workerThread=2

#
# If it is required to set the number of local processing thread differently to the global number for a particular consumer 
# (name of consumer.classes property) then this is set here. The notation is: consumer.local.workerThread.<consumerName>=<number> 
#consumer.local.workerThread.StudentDailyAttendanceConsumer=5


#---------------------------------#
# Brokered Environment Properties
#---------------------------------#
#env.xml.file.name=systemicDemo.xml
#env.application.key=DemoFramework
#env.pwd=Demo1
#env.baseURI=https://mybroker.com/systemicDemo/environments/environment


#---------------------------------#
# Custom Properties
#---------------------------------#
test.tempDir.output=C:/Development/GitHubRepositories/SIF3InfraRest/SIF3InfraREST/TestData/xml/output
#test.tempDir.output=C:/DEV/eclipseWorkspace/SIF3InfraREST/TestData/xml/output
# Time in secs how long a consumer shall pretend to be busy for testing purposes
test.consumer.busy.delay=30
test.consumer.write.payload=false
test.testmode=true

