==============================================================
Release Notes for v0.15.0 of SIF3 Framework (Oct 26, 2020)
==============================================================

Bug Fixes
---------
- None

New Functionality
-----------------
- Added initial support for Schema Version Negotiation functionality. See Developer's Guide section 2.4 for further details. This
  new functionality required minor changes to the Functional Service and Named Query interfaces. If your project uses any of these
  then your code will break as the changes are "breaking changes". However there is a simple fix that is further detailed in below
  sections. 
- Support for PESC JSON. This is a new JSON format that is available since SIF 3.3. Details about the exact notation can be found
  at this location: http://specification.sifassociation.org/Implementation/Infrastructure/3.3/PESC_JSON.pdf. The addition of this
  JSON format required a few new method do be added to a couple of interfaces (MarshalFactory & UnmarshalFactory). Hence there is
  a possibility that some of your code may break if you have implemented classes that are based on any of the changed interfaces.
  Steps to rectify potential compilation errors are listed in the "Code Upgrade" section further below. Further, if you use a data
  model library that is produced with the SIF3DMGenerator project then **you must rebuild** the data model library with the
  SIF3DMGenerator project to ensure compatibility. Please refer to the **Summary - Usage with SIF3 Framework**" section in the 
  README.md file of the SIF3DMGenerator project (https://github.com/Access4Learning/SIF3DMGenerator-Java/tree/master/SIF3DMGenerator).
- Further enabled split of infra datamodel and local datamodel in terms of mime type. It is now possible to use XML for one model
  and JSON for the other.
- Enable timestamp HTTP Header age check for SIF_HMACSHA256 authentication.
- Enable infrastructure namespace version mapping. This allows the framework to work with any infrastructure version in either
  a BROKERED or DIRECT mode. Please refer to section 5.16 of the developer's guide for details on how to enable different infrastructure
  versions in the framework.

Changed Functionality
---------------------
- Updated framework to use SIF 3.3 Infrastructure namespace and data model. However it is still possible to use the framework for older
  infrastructure versions. Please refer to section 5.16 of the developer's guide for details on how to enable different infrastructure
  versions in the framework. 
- Updated Quartz from version 2.3.0 to 2.3.2 to address security vulnerability.

Removed Artifacts/Functionality
-------------------------------
- None


==========================
-- Upgrade Instructions --
==========================

----------------------------
-- Infrastructure Upgrade --
----------------------------
Step 1: DB Upgrade
------------------
Due to the support for SIF 3.3 infrastructure there is a need to update some database content of the 
SIF3_SESSION table and the JOB related tables. There is a SQL script THAT MUST BE RUN first to fix data in the database. 
It will upgrade the namespace of all existing environment XML and/or job XML in these tables to SIF 3.3.
The script can be found in the directory <frameworkInstall>/DB/DDL/Datafix/current/v0.14.1-v0.15.0. Run the scripts
with the name Datafix20190612_<dbType>.sql and Datafix20210111_<dbType>.sql. If you use a database other than the ones that
have an update script provided you should be able to derive your script based on one of the provided one's.

Step 2: Environment Template Upgrade
------------------------------------ 
The environment template XMLs need a fix as well. They should be in a directory called "environments/consumer/template"
and "environments/provider/template". Ensure that the following namespaces
- http://www.sifassociation.org/infrastructure/3.0.1 or 
- http://www.sifassociation.org/infrastructure/3.1 or 
- http://www.sifassociation.org/infrastructure/3.2.1 
are changed to http://www.sifassociation.org/infrastructure/3.3.

Step 3: Job Template Upgrade
---------------------------- 
The Job template XMLs need a fix as well. They should be in a directory called "environments/consumer/template/job"
and "environments/provider/template/job". Ensure that the following namespaces
- http://www.sifassociation.org/infrastructure/3.0.1 or 
- http://www.sifassociation.org/infrastructure/3.1 or 
- http://www.sifassociation.org/infrastructure/3.2.1 
are changed to http://www.sifassociation.org/infrastructure/3.3.


Upgrade your Project
--------------------
Once the above steps are done you can upgrade your project with the latest libraries of the framework as stated below:

Ant:
Drop the latest framework library into your project's lib directory/directories. 

Maven:
Use the latest maven dependency
<dependency>
   <groupId>sif3.framework</groupId>
   <artifactId>sif3-infra-rest</artifactId>
   <version>0.15.0</version>
</dependency>

------------
Code Upgrade 
------------

Changes to Functional Service and Named Query Interfaces
--------------------------------------------------------
As part of the schema version negotiation functionality that has been added in this version of the framework some interfaces 
required one parameter to be changed. Affected interfaces are:
- FunctionalServiceConsumer
- FunctionalServiceProvider
- NamedQueryProvider

A number of methods in the above interfaces used to have a parameter called "MediaType returnMimeType". This has been changed to a 
parameter called "PayloadMetadata returnPayloadMetadata". If you have consumers or providers that extend the respective abstract 
class a compilation error will be shown.

Fix
---
To fix the above compilation error you need to do the following simple steps:
1) Replace the parameter with the name and type "MediaType returnMimeType" with "PayloadMetadata returnPayloadMetadata".
2) Where your code accessed the old parameter called "returnMimeType" you replace your code with "returnPayloadMetadata.getMimeType()".

The above two steps should remove the compilation errors.

Finally some methods of the mentioned interfaces return a structure that contains or extends a class called "StringPayload". This 
class used to have a property called "MediaType mimeType". This has been replaced with "PayloadMetadata payloadMetadata". 
As with the fix above you need to modify your code where you accessed "mimeType" with "payloadMetadata.getMimeType()" or 
"payloadMetadata.setMimeType()".

Changes to MarshalFactory & UnmarshalFactory Interfaces
-------------------------------------------------------
To enable PESC-JSON the JAXBUtils class required changes. This in turn required the MarshalFactory & UnmarshalFactory Interfaces to
add a couple new methods to support the new JSON format. A couple methods have been deprecated. If your code has implemented classes
for any of the two interfaces you will get compilation error due to the fact that the newly introduced methods are missing. Simply
add them to the classes where the compilation error appears. Optionally they can be implemented if your project wishes to support
JSON-PESC. If your project uses data model libraries produced by the SIF3DMGenerator project then the implementation is very easy
(e.g. simply call the correct JAXBUtils class method). An example for such an implementation can be found in the 
sif3.infra.common.conversion.InfraMarshalFactory or sif3.infra.common.conversion.InfraUnmarshalFactory class of this framework.

Finally if you use a data model library produced with the SIF3DMGenerator then you MUST REBUILD that data model library with the
latest version of the SIF3DMGenerator otherwise you will get incompatibility with the data model library and the framework. 
Please refer to the **Summary - Usage with SIF3 Framework**" section in the README.md file of the SIF3DMGenerator project 
(https://github.com/Access4Learning/SIF3DMGenerator-Java/tree/master/SIF3DMGenerator) to ensure you re-build with the correct version.

Changes to BaseConsumer & CoreProvider
--------------------------------------
The BaseConsumer & CoreProvider had a getRequestMediaType() and getResponseMediaType() method that could be overridden to use 
media types other than XML or JSON. These two methods have been replaced with a set of 4 methods called:

  - getDataModelRequestPayloadMetadata()
  - getDataModelResponsePayloadMetadata()
  - getInfraRequestPayloadMetadata()
  - getInfraResponsePayloadMetadata()
  
This was necessary to enable schema negotiation functionality as well as enable a clearer split between infrastructure media type
and data model media type. If you haven't a consumer or provider that did override the original methods then you will not be required
to do anything and your code will still compile and build. However if you have overridden the original methods for any adapter
then your code will show an error now, as these methods no longer exist. Your error can be fixed by simply implement the new methods.

For example if your getRequestMediaType() override looked like this:

    public MediaType getRequestMediaType() {
        return getMarshaller().getDefault();
    }
    
You need to change the two getDataModelRequestPayloadMetadata() and getInfraRequestPayloadMetadata() to:

    public PayloadMetadata getDataModelRequestPayloadMetadata() {
	    return new PayloadMetadata(getMarshaller().getDefault());
    }

A similar approach is used for the 'ResponseMediaType' methods. An example can also be found in the 
systemic.sif3.demo.rest.consumer.CSVStudentConsumer class.

Data Model Upgrade
------------------
None.

3rd Party Library Update
------------------------
None.
